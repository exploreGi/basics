name: CD

on:
    #workflow_dispatch:
    workflow_run:
      workflows: ["CI"]
      types:
        - completed
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: [self-hosted, ec2-docker]
    permissions:
      actions: read
    steps:  
      - name: Download artifact image tag
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.ACCESS_TOKEN }} 

      - name: Test artifact download
        run: ls -R
      
      - name: Read tag from artifact
        id: read_tag
        run: |
          IMAGE_TAG=$(cat image-tag.txt)        
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Extract repository name
        id: repo-name
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "name=$repo-name" >> $GITHUB_OUTPUT 

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ubuntu/docker"

      - name: Deploy to EC2 using SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          port: 22
          script: |
            set -e
            cd /home/ubuntu/docker
            # Install docker-compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found, installing..."
              # Attempt to fetch the latest version dynamically
              LATEST_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
              # Fallback if API fails or rate limit or if LATEST_COMPOSE_VERSION is empty
              if [ -z "$LATEST_COMPOSE_VERSION" ]; then
                LATEST_COMPOSE_VERSION="v2.27.0" # Specify a known good version as fallback
                echo "Failed to fetch latest docker-compose version or version string is empty, using fallback ${LATEST_COMPOSE_VERSION}"
              else
                echo "Fetched latest docker-compose version: ${LATEST_COMPOSE_VERSION}"
              fi
              sudo curl -L "https://github.com/docker/compose/releases/download/${LATEST_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo "docker-compose ${LATEST_COMPOSE_VERSION} installed to /usr/local/bin/docker-compose"
            else
              echo "docker-compose is already installed."
            fi
           
             # Docker login
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Define image variables
            # REPO_NAME is set in GITHUB_ENV by 'Extract repository name' step
            # tag is set as an output by 'Read tag from artifact' step
            DKR_REPOSITORY_VAR="${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}"
            IMAGE_TAG_VAR="${{ steps.read_tag.outputs.tag }}"

            echo "Pulling image: $DKR_REPOSITORY_VAR:$IMAGE_TAG_VAR"
            sudo docker pull "$DKR_REPOSITORY_VAR:$IMAGE_TAG_VAR"
            
            echo "Running docker-compose up"
            # Export variables for docker-compose
            export DKR_REPOSITORY="$DKR_REPOSITORY_VAR"
            export IMAGE_TAG="$IMAGE_TAG_VAR"
            sudo docker-compose up -d --force-recreate
        


  
                     


