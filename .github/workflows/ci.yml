name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
################################################################
###               DETERMINE NEXT VERSION                     ###
###   Used for creating new releases and image tags          ###
################################################################

    - name: Determine Next Version
      id: next_version
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get the latest tag, assume semver, and sort.
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        
        # If there's no tag yet, start with v0.0.0. Used for new repos
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        
        # Increment the patch version
        NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
        
        # Output the next version
        echo "tag=$NEXT_TAG" >> $GITHUB_OUTPUT
        echo "Next version: $NEXT_TAG"

################################################################
###                     CREATE RELEASE                       ###
###  Creating release with the tag from the previous step    ###
################################################################

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.tag }}
        release_name: Release ${{ steps.next_version.outputs.tag }}
        draft: false
        prerelease: false

    - name: Setup docker 
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract repository name
      id: repo-name
      run: |
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        echo "name=$repo-name" >> $GITHUB_OUTPUT
        echo "@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" $REPO_NAME
    

    - name: Build Docker image
      env:
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
        DKR_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
        
        DKR_REPOSITORY:  ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}
  
        
      run: |
        echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" $DKR_REPOSITORY ${{ env.REPO_NAME }}
        docker build -t $DKR_REPOSITORY:$IMAGE_TAG .

    - name: Run tests (if any)
      run: |
        echo "No tests to run"

    - name: Push Docker image
      run: |
        # Tag the image as latest
        docker tag $DKR_REPOSITORY:$IMAGE_TAG $DKR_REPOSITORY:latest

        # Push the specific version tag
        docker push $DKR_REPOSITORY:$IMAGE_TAG

        # Push the latest tag
        docker push $DKR_REPOSITORY:latest

    - name: Connect to EC2 
      env:
        EC2_PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        # Save PEM key to file and set permissions
        echo "$EC2_PEM_KEY" > ec2.pem
        chmod 400 ec2.pem

        # SSH, SCP commands
        SSH_COMMAND="ssh -i ec2.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST"
        SCP_COMMAND="scp -i ec2.pem -o StrictHostKeyChecking=no"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull the image from Docker hub and run container
      run: |
        
        docker pull $DKR_REGISTRY/$DKR_REPOSITORY:$IMAGE_TAG
        docker compose -f docker-compose.yml up -d --force-recreate
        rm -f ec2.pem
          
  
