name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
################################################################
###               DETERMINE NEXT VERSION                     ###
###   Used for creating new releases and image tags          ###
################################################################

    - name: Determine Next Version
      id: next_version
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get the latest tag, assume semver, and sort.
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        
        # If there's no tag yet, start with v0.0.0. Used for new repos
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        
        # Increment the patch version
        NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
        
        # Output the next version
        echo "tag=$NEXT_TAG" >> $GITHUB_OUTPUT
        echo "Next version: $NEXT_TAG"

    - name: Save IMAGE-TAG as artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: echo "${{ steps.next_version.outputs.tag }}" > image-tag.txt
    

    - name: Upload IMAGE-TAG
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: image-tag
        path: image-tag.txt
      

################################################################
###                     CREATE RELEASE                       ###
###  Creating release with the tag from the previous step    ###
################################################################

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.tag }}
        release_name: Release ${{ steps.next_version.outputs.tag }}
        draft: false
        prerelease: false

    - name: Setup docker 
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract repository name
      id: repo-name
      run: |
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        echo "name=$repo-name" >> $GITHUB_OUTPUT    

    - name: Build Docker image
      env:
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
        DKR_REGISTRY: ${{ secrets.DOCKER_USERNAME }}        
        DKR_REPOSITORY:  ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}
  
        
      run: |
        docker build -t $DKR_REPOSITORY:$IMAGE_TAG .

    - name: Run tests (if any)
      run: |
        echo "No tests to run"

    - name: Push Docker image
      env:
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
        DKR_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
        DKR_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}
      run: |
        # Tag the image as latest
        echo "%%%%%%%%%% $DKR_REPOSITORY %%%%%%%%%%%%"
        docker tag $DKR_REPOSITORY:$IMAGE_TAG $DKR_REPOSITORY:latest

        # Push the specific version tag
        docker push $DKR_REPOSITORY:$IMAGE_TAG

        # Push the latest tag
        docker push $DKR_REPOSITORY:latest  